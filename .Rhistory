p<-19
n<- 100
listofNum<-NULL
for(i in 1:n){
x_n <- (x1*B1) + x2*(B2 %% p)
x1<-x2
x2<-x_n
listofNum<-c(listofNum, x_n)
}
}
rng(1,2)
rng<-function(x2,x1){
B1<-7
B2<-5
p<-19
n<- 100
listofNum<-NULL
for(i in 1:n){
x_n <- (x1*B1) + x2*(B2 %% p)
x1<-x2
x2<-x_n
listofNum<-c(listofNum, x_n)
}
listofNum
}
rng(1,2)
rng<-function(x2,x1){
B1<-7
B2<-5
p<-19
n<- 100
listofNum<-NULL
for(i in 1:n){
x_n <- (xn_1*B1) + xn_2*(B2 %% p)
xn_2<-xn_1
xn_1<-x_n
listofNum<-c(listofNum, x_n)
}
listofNum
}
rng(1,2)
xn_2<-xn_1
xn_1<-x_n
rng<-function(xn_2,xn_1){
B1<-7
B2<-5
p<-19
n<- 100
listofNum<-NULL
for(i in 1:n){
x_n <- (xn_1*B1) + xn_2*(B2 %% p)
xn_2<-xn_1
xn_1<-x_n
listofNum<-c(listofNum, x_n)
}
listofNum
}
rng(1,2)
whole_number_checker<- function(a){
ifelse(a%%1==0, "Integer Value",  "Decimal Value Present" )
}
whole_number_checker(3)
whole_number_checker(3.1)
whole_number_checker(27/7)
total_amount<- function(P, r, n, t){
A<- P * (1+(r/n))^(n*t)
A
}
total_amount(P=5000, r=0.075, n=1, t=7)
total_amount(P=10000, r=0.05, n=12, t=20)
total_amount<- function(P, r, n, t){
A<- P * (1+(r/n))^(n*t)
round(A)
}
total_amount(P=5000, r=0.075, n=1, t=7)
total_amount(P=10000, r=0.05, n=12, t=20)
total_amount<- function(P, r, n, t){
A<- P * (1+(r/n))^(n*t)
round(A,2)
}
total_amount(P=5000, r=0.075, n=1, t=7)
total_amount(P=10000, r=0.05, n=12, t=20)
length_of_time <- function( A, P, r, n ){
t<- 0
target_amount <- P
while(target_amount<A){
t<-t+1
target_amount<-  target_amount * (1+(r/n))^(n*1) # t is one
}
t
}
length_of_time(P=10000, A=20000, r=0.05, n=12)
length_of_time(P=5000, A=100000, r=0.03, n=1)
monthly_deposit<-function(t){
P<-500
n<-12
r<-0.01
total_mount<-0
numberofmonths<-0
while(numberofmonths< (t)*12){
total_mount<-(total_mount +P)*(1+r/n)^(n)
numberofmonths<- numberofmonths+1
}
print(total_mount)
}
monthly_deposit(t=1)
monthly_deposit(t=5)
monthly_deposit(t=7.5)
monthly_deposit<-function(t){
P<-500
n<-12
r<-0.01
total_mount<-0
numberofmonths<-0
months<-t*12
for ( mon in 1:months){
total_amount<-(total_mount + P) *(1+r)
}
#  while(numberofmonths< months){
#   total_mount<-(total_mount +P)*(1+r/n)^(n)
#  numberofmonths<- numberofmonths+1
# }
print(total_mount)
}
monthly_deposit(t=1)
monthly_deposit(t=5)
monthly_deposit(t=7.5)
for ( mon in 1:months){
total_amount<-(total_mount + P) *(1+r)
}
monthly_deposit<-function(t){
P<-500
r<-0.01 # monthly interest
total_mount<-0
numberofmonths<-0
months<-t*12
while(numberofmonths< months){
total_mount<-(total_mount +P)*(1+r)
numberofmonths<- numberofmonths+1
}
print(total_mount)
}
monthly_deposit(t=1)
monthly_deposit(t=5)
monthly_deposit(t=7.5)
rng(xn_1 = 11, xn_2 = 3)
rng(xn_1 = 11, xn_2 = 3)
rng<-function(xn_2,xn_1){
B1<-7
B2<-5
p<-19
n<- 100
listofNum<-NULL
for(i in 1:n){
x_n <- (xn_1*B1 + xn_2*B2) %% p
xn_2<-xn_1
xn_1<-x_n
listofNum<-c(listofNum, x_n)
}
listofNum
}
rng(xn_1 = 11, xn_2 = 3)
rng<-function(xn_2,xn_1){
B1<-7
B2<-5
p<-19
n<- 100
listofNum<-NULL
for(i in 1:n){
x_n <- (xn_1*B1 + xn_2*B2) %% p
xn_2<-xn_1
xn_1<-x_n
listofNum<-c(listofNum, x_n)
}
listofNum
}
rng(xn_1 = 11, xn_2 = 3)
rng(xn_1 = 7, xn_2 = 12)
rng<-function(xn_2,xn_1){
B1<-7
B2<-5
p<-19
n<- 100
listofNum<-NULL
for(i in 1:n){
x_n <- (xn_1*B1 + xn_2*B2) %% p
xn_2<-xn_1
xn_1<-x_n
listofNum<-c(listofNum, x_n)
}
listofNum
}
rng(xn_1 = 11, xn_2 = 3)
# second example
rng(xn_1 = 7, xn_2 = 12)
knitr::opts_chunk$set(echo = TRUE)
library(tinytex)
output:
pdf_document:
latex_engine: xelatex
output:
pdf_document:
latex_engine: xelatex
tinytex::is_tinytex()
tinytex::install_tinytex()
tinytex::uninstall_tinytex()
tinytex::install_tinytex()
install.packages("ggplot2")
knitr::opts_chunk$set(echo = TRUE)
ggplot2::aes()
ggplot2::aes(iris)
ggplot(iris)
library(ggplot2)
ggplot(iris)
ggplot(iris, aes(x=Petal.Length))
ggplot(iris, aes(x=Petal.Length))+
geom_histogram()
ggplot(iris, aes(x=Petal.Length))+
geom_histogram(bins = 8)
ggplot(iris, aes(x=Petal.Length))+
geom_histogram(bins =0.75, colors(blue))
geom_histogram(bins =0.75, colors="blue"
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
ggplot(iris) # doesn't work
ggplot(iris, aes(x=Petal.Length))+
geom_histogram(bins =0.75, colors="blue"
geom_histogram(bins =0.75, fill= "blue" colors="black"
ggplot(iris, aes(x=Petal.Length))+
geom_histogram(bins =0.75, fill= "blue" colors="black")
ggplot(iris, aes(x=Petal.Length))+
geom_histogram(bins =0.75, fill= "blue" color="black")
ggplot(iris) # doesn't work
ggplot(iris, aes(x=Petal.Length))+
geom_histogram(bins =0.75, fill= "blue" color="black")
ggplot(iris, aes(x=Petal.Length))+
geom_histogram(binwidth =0.75, fill= "blue" color="black")
ggplot(iris, aes(x=Petal.Length))
ggplot(iris, aes(x=Petal.Length))+
geom_density(color="red", lwd=1)
ggplot(iris, aes(x=Petal.Length))+
geom_histogram(binwidth =50, fill= "blue" color="black")
ggplot(iris, aes(x=Petal.Length))+
geom_histogram(binwidth =50)
ggplot(iris, aes(x=Petal.Length))+
geom_histogram(binwidth =0.75)
ggplot(iris) # doesn't work
ggplot(iris, aes(x=Petal.Length))+
geom_histogram(binwidth =0.75)
ggplot(iris, aes(x=Petal.Length))+
geom_histogram(binwidth =0.75, fill= "black")
ggplot(iris, aes(x=Petal.Length))+
geom_histogram(binwidth =0.75, fill= "black", color="red")
ggplot(iris, aes(x=Petal.Length))+
geom_density(binwidth= 0.75, fill="lightblue")
ggplot(iris, aes(x=Petal.Length))+
geom_histogram(binwidth= 0.75, fill="lightblue")+
geom_density(color="red")
ggplot(iris, aes(x=Petal.Length))+
geom_histogram(binwidth= 0.75, fill="lightblue")+
geom_density(color="red")+
labs(title="looking at the Petal Length", x="petal length")+
theme(plot.title = element_text(hjust=0.5))
ggplot(iris, aes(x=Petal.Length))+
geom_histogram(binwidth= 0.75, fill="lightblue", alpha=0.75)+
geom_density(color="red")+
labs(title="looking at the Petal Length", x="petal length")+
theme(plot.title = element_text(hjust=0.5))
head(mlb_player_18)
head(mlb_player_18)
ggplot(mlb_player_18$H)
ggplot(mlb_player_18, aes(x=mlb_player_18$H))
element_text
ggplot(mlb_player_18, aes(x=mlb_player_18$H))+
geom_histogram(binwidth= 0.75, fill="lightblue", alpha=0.75)+
geom_density(color="red")+
labs(title="looking at the Petal Length", x="petal length")+
theme(plot.title = element_text(hjust=0.5))
ggplot(mlb_player_18, aes(x=mlb_player_18$H))+
geom_histogram( fill="lightblue", alpha=0.75)+
geom_density(color="red")+
labs(title="looking at the Petal Length", x="petal length")+
theme(plot.title = element_text(hjust=0.5))
gadget <- d3heatmapGadget(gadget)
devtools::install_github("talgalili/d3heatmap")
#devtools::install_github("talgalili/d3heatmap")
require("d3heatmap");require("shiny");require("miniUI");require("data.table");require("pbapply")
ui <- fluidPage(
titlePanel("projectoR - ggplot2 in seconds"),
sidebarLayout(
sidebarPanel(
fileInput("file1", "Choose CSV File", accept = ".csv"),
actionButton("loadExample", "Load Example Dataset"),
uiOutput("xVarUI"),
uiOutput("yVarUI"),
checkboxInput("transformX", "Transform X Variable", value = FALSE),
checkboxInput("transformY", "Transform Y Variable", value = FALSE),
selectInput("transformXType", "X Transformation Type", choices = c("as.factor", "as.numeric"), selected = "as.factor"),
selectInput("transformYType", "Y Transformation Type", choices = c("as.factor", "as.numeric"), selected = "as.factor"),
selectInput("geom", "Geometry",
choices = c("Point" = "geom_point", "Line" = "geom_line", "Bar" = "geom_bar", "Boxplot" = "geom_boxplot")),
colorPickr("color", "Color", preview = TRUE),
pickerInput("fill", "Fill Color", choices = c("Blue", "Red", "Green", "Yellow"), options = list(`style` = "btn-inverse"), multiple = FALSE),
selectInput("theme", "Theme",
choices = c("Default" = "theme_gray", "Minimal" = "theme_minimal", "Classic" = "theme_classic", "Light" = "theme_light", "Dark" = "theme_dark")),
sliderInput("pointSize", "Point Size", min = 1, max = 5, value = 2),
selectInput("ciLevel", "Confidence Level",
choices = c("None", "90%" = 0.90, "95%" = 0.95, "99%" = 0.99, "99.99%" = 0.9999)),
checkboxInput("fitLine", "Fit Line (LM)", value = FALSE),
textInput("xTitle", "X-axis Title"),
textInput("yTitle", "Y-axis Title"),
textInput("graphTitle", "Graph Title"),
textInput("graphCaption", "Graph Caption"),
numericInput("xMin", "X-axis Min", value = NA),
numericInput("xMax", "X-axis Max", value = NA),
numericInput("yMin", "Y-axis Min", value = NA),
numericInput("yMax", "Y-axis Max", value = NA),
checkboxInput("discreteX", "Discrete X-axis", value = FALSE),
checkboxInput("discreteY", "Discrete Y-axis", value = FALSE),
actionButton("generatePlot", "Generate Plot"),
downloadButton("downloadPlot", "Download Plot"),
tags$hr(),
tags$a(href = "https://william-christiansen.shinyapps.io/data_distillery/", target = "_blank", class = "btn btn-default", "Dirty data?")
),
mainPanel(
tabsetPanel(
tabPanel("Plot", plotOutput("plot")),
tabPanel("Learn It!", tags$iframe(style = "height:600px; width:100%", src = "ggplot2_guide.pdf"))
),
# Footer
div(
class = "footer",
style = "margin-top: 20px; text-align: center; color: #777;",
"Created by William Christiansen, Ph.D. - ",
a(href = "mailto:w.t.christiansen@msmary.edu", "w.t.christiansen@msmary.edu"),
" | ",
a(href = "https://sites.google.com/vt.edu/williamchristiansen/", "Visit My Website")
)
)
)
)
server <- function(input, output, session) {
data <- reactiveVal(NULL)
observeEvent(input$file1, {
df <- read.csv(input$file1$datapath)
data(df)
})
observeEvent(input$loadExample, {
data(example_data)
updateSelectInput(session, "xVar", choices = names(example_data))
updateSelectInput(session, "yVar", choices = names(example_data))
})
output$xVarUI <- renderUI({
req(data())
selectInput("xVar", "X Variable", choices = names(data()))
})
output$yVarUI <- renderUI({
req(data())
selectInput("yVar", "Y Variable", choices = names(data()))
})
output$plot <- renderPlot({
req(input$generatePlot, data())
df <- data()
# Optionally transform variables
if(input$transformX) {
df[[input$xVar]] <- match.fun(input$transformXType)(df[[input$xVar]])
}
if(input$transformY) {
df[[input$yVar]] <- match.fun(input$transformYType)(df[[input$yVar]])
}
# Use aes() for mapping
p <- ggplot(df, aes(x = !!sym(input$xVar), y = !!sym(input$yVar))) +
get(input$geom)(colour = input$color, size = input$pointSize, fill = input$fill) +
labs(title = input$graphTitle, x = input$xTitle, y = input$yTitle, caption = input$graphCaption) +
{switch(input$theme,
"theme_gray" = theme_gray(),
"theme_minimal" = theme_minimal(),
"theme_classic" = theme_classic(),
"theme_light" = theme_light(),
"theme_dark" = theme_dark())}
# Adjust scales
if(!is.na(input$xMin) && !is.na(input$xMax)) {
p <- p + scale_x_continuous(limits = c(input$xMin, input$xMax))
}
if(!is.na(input$yMin) && !is.na(input$yMax)) {
p <- p + scale_y_continuous(limits = c(input$yMin, input$yMax))
}
# Add confidence interval if selected and fit line
if(input$ciLevel != "None" && input$fitLine) {
p <- p + geom_smooth(method = "lm", level = as.numeric(input$ciLevel))
}
print(p)
})
output$downloadPlot <- downloadHandler(
filename = function() {
paste("plot-", Sys.Date(), ".png", sep="")
},
content = function(file) {
# Use the plot object directly
ggsave(file, device = "png", width = 10, height = 8)
}
)
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("projectoR - ggplot2 in seconds"),
sidebarLayout(
sidebarPanel(
fileInput("file1", "Choose CSV File", accept = ".csv"),
actionButton("loadExample", "Load Example Dataset"),
uiOutput("xVarUI"),
uiOutput("yVarUI"),
checkboxInput("transformX", "Transform X Variable", value = FALSE),
checkboxInput("transformY", "Transform Y Variable", value = FALSE),
selectInput("transformXType", "X Transformation Type", choices = c("as.factor", "as.numeric"), selected = "as.factor"),
selectInput("transformYType", "Y Transformation Type", choices = c("as.factor", "as.numeric"), selected = "as.factor"),
selectInput("geom", "Geometry",
choices = c("Point" = "geom_point", "Line" = "geom_line", "Bar" = "geom_bar", "Boxplot" = "geom_boxplot")),
colorPickr("color", "Color", preview = TRUE),
pickerInput("fill", "Fill Color", choices = c("Blue", "Red", "Green", "Yellow"), options = list(`style` = "btn-inverse"), multiple = FALSE),
selectInput("theme", "Theme",
choices = c("Default" = "theme_gray", "Minimal" = "theme_minimal", "Classic" = "theme_classic", "Light" = "theme_light", "Dark" = "theme_dark")),
sliderInput("pointSize", "Point Size", min = 1, max = 5, value = 2),
selectInput("ciLevel", "Confidence Level",
choices = c("None", "90%" = 0.90, "95%" = 0.95, "99%" = 0.99, "99.99%" = 0.9999)),
checkboxInput("fitLine", "Fit Line (LM)", value = FALSE),
textInput("xTitle", "X-axis Title"),
textInput("yTitle", "Y-axis Title"),
textInput("graphTitle", "Graph Title"),
textInput("graphCaption", "Graph Caption"),
numericInput("xMin", "X-axis Min", value = NA),
numericInput("xMax", "X-axis Max", value = NA),
numericInput("yMin", "Y-axis Min", value = NA),
numericInput("yMax", "Y-axis Max", value = NA),
checkboxInput("discreteX", "Discrete X-axis", value = FALSE),
checkboxInput("discreteY", "Discrete Y-axis", value = FALSE),
actionButton("generatePlot", "Generate Plot"),
downloadButton("downloadPlot", "Download Plot"),
tags$hr(),
tags$a(href = "https://william-christiansen.shinyapps.io/data_distillery/", target = "_blank", class = "btn btn-default", "Dirty data?")
),
mainPanel(
tabsetPanel(
tabPanel("Plot", plotOutput("plot")),
tabPanel("Learn It!", tags$iframe(style = "height:600px; width:100%", src = "ggplot2_guide.pdf"))
),
# Footer
div(
class = "footer",
style = "margin-top: 20px; text-align: center; color: #777;",
"Created by William Christiansen, Ph.D. - ",
a(href = "mailto:w.t.christiansen@msmary.edu", "w.t.christiansen@msmary.edu"),
" | ",
a(href = "https://sites.google.com/vt.edu/williamchristiansen/", "Visit My Website")
)
)
)
)
install.packages(c("shiny", "ggplot2", "shinyWidgets", "readxl"))
shiny::runApp("path_to_your_app_folder")
setwd("path/to/my_shiny_app")
setwd("C:\Users\16086\OneDrive - Mount St. Mary's University\Desktop\Classes\Fourth Semester\Sage Fellowship\NewFolderHeatmap github\Githubfile\app.R")
setwd("C:/Users/16086/OneDrive - Mount St. Mary's University/Desktop/Classes/Fourth Semester/Sage Fellowship/NewFolderHeatmap github/Githubfile/app.R")
setwd("C:/Users/16086/OneDrive - Mount St. Mary's University/Desktop/Classes/Fourth Semester/Sage Fellowship/NewFolderHeatmap github/Githubfile")
setwd("C:/Users/16086/OneDrive - Mount St. Mary's University/Desktop/Classes/Fourth Semester/Sage Fellowship/NewFolderHeatmap github/Githubfile")
dirname(file.choose(a))
shiny::runApp()
install.packages(c("shiny", "ComplexHeatmap", "InteractiveComplexHeatmap"))
install.packages("circlize")
library(shiny)
library(ComplexHeatmap)
htshiny()
m <- matrix(rnorm(100), 10)
rownames(m) <- 1:10
colnames(m) <- 1:10
ht <- Heatmap(m)
m <- matrix(rnorm(100), 10)
rownames(m) <- 1:10
colnames(m) <- 1:10
ht <- Heatmap(m)
m <- matrix(rnorm(100), 10)
rownames(m) <- 1:10
colnames(m) <- 1:10
m
ht <- Heatmap(m)
ht<-Heatmap(m)
ht
ht
ht
ht
ht <- Heatmap(m)
ht
ht <- draw(ht)  # Ensure the heatmap is drawn before using it in the app
# == title
# Interactive heatmaps as a Shiny app
#
# == param
# -... All goes to `htShiny`.
#
# == value
# A Shiny app object.
#
ht_shiny = function(...) {
htShiny(...)
}
}
}
htshiny(ht)
library("heatmaply")
install.packages(heatmaply)
install.packages("heatmaply")
